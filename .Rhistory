?install_from_swirl
Ã­nstall_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
g1
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1,1) * qt(.975, 9) * s/sqrt(10)
x$conf.int
t.test(difference)$conf.int
7*15.34^2 + 20*18.23^2
sp <- 7*15.34^2 + 20*18.23^2
ns <- 27
sp <- sqrt(sp/ns)
132.86 - 127.44 + c(-1,1) * qt(0.975, ns) * sp
132.86 - 127.44 + c(-1,1) * qt(0.975, ns) * sp * sqrt(1/8 + 1/21)
sqrt(var(g1)/9 + var(g2)/9)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md + c(-1,1) * qt(0.975, 18) * sp * sqrt(1/10 + 1/10)
t.test(g2, g1, paired=FALSE, var.equal+TRUE)
t.test(g2, g1, paired=FALSE, var.equal=TRUE)
t.test(g2, g1, paired=FALSE, var.equal=TRUE)$conf
t.test(g2, g1, paired=TRUE, var.equal=TRUE)$conf
t.test(g2, g1, paired=TRUE)$conf
num <- (15.34^2/8)^2 / 7 + (18.23^2/21)/21
num <- (15.34^2/8 + 18.23^2/21)^2
den <- (15.34^2/8)^2 / 7 + (18.23^2/21)/21
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
132.86 - 127.44 + c(-1,1) * qt(0.975, mydf) * sqrt(15.34^2/8 + 18.23^2/21)
1-(3/36)
deck
52
4/52
0
12/52
3/52
2/52
2/51
.8 * 1.6 * .5
0.64
mypdf
?integrate
integrate(mypdf, 0, 1.6)
sqrt(.5*4)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
box3 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, y=1000, cgt=0.20, dt=0.25) {
results <- c(0, s, 0, 0, 0)
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
}
results
}
r <- box3()
?cagr
box3 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, cgt=0.20, dt=0.25) {
results <- c(0, s, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[i]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * (1-cgt) * (1-dt)
t[5] <- 2819
results <- rbind(results, t)
}
results
}
r <- box3()
box3 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, cgt=0.20, dt=0.25) {
results <- c(0, s, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * (1-cgt) * (1-dt)
t[5] <- 2819
results <- rbind(results, t)
}
results
}
r <- box3()
View(r)
box3 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, cgt=0.20, dt=0.25) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * (1-cgt) * (1-dt)
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
View(r)
r <- box3()
View(r)
box2 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, t=0.012) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[4] <- t * t[2]
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r2 <- box2()
View(r2)
box2 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, tax=0.012) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[4] <- tax * t[2]
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r2 <- box2()
View(r2)
box2 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, tax=0.012) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[4] <- tax * t[2]
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]-t[4]
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r2 <- box2()
View(r2)
returns <- rnorm(50, 0.04, 0.1)
r2 <- box2(returns)
r3 <- box3(returns)
View(r2)
box2 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, tax=0.012) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[4] <- tax * t[2]
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]-t[4]
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
box3 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, cgt=0.20, dt=0.25) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * (1-cgt) * (1-dt)
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r2 <- box2(returns)
r3 <- box3(returns)
View(r3)
box3 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, tax=0.012) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[4] <- tax * t[2]
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]-t[4]
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
box2 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, cgt=0.20, dt=0.25) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * (1-cgt) * (1-dt)
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r3 <- box3(returns)
r2 <- box2(returns)
View(r3)
box2 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, cgt=0.20) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * (1-cgt)
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r2 <- box2(returns)
View(r2)
box2 <- function(returns=c(0.1, -0.1, 0.2, -0.1, 0.3), s=10000, cgt=0.20) {
results <- c(0, s, 0, 0, 0, 0)
t<- results
names(results) <- c("year", "investment", "returns", "tax", "CAGR")
for (y in 1:length(returns)) {
t[1] <- y
t[3] <- t[2] * returns[y]
t[2] <- t[2]+t[3]
t[4] <- (t[2] - s ) * cgt
t[5] <- 2819
t[6] <- returns[y]
results <- rbind(results, t)
}
results
}
r2 <- box2(returns)
View(r2)
View(r3)
?shuttle
library(MASS)
s <- shuttle
str(s)
View(s)
?glm
fit <- glm(s$auto ~s$wind)
fit <- glm(s$auto ~ s$wind, family="binomial")
fit <- glm(s$use ~ s$wind, family="binomial")
fit
s$auto <- as.numeric(s$use)
s$wind <- as.numeric(s$wind)
View(s)
s <- shuttle
s$auto <- as.numeric(s$use)
s$twind <- as.numeric(s$wind)
s
View(s)
s$auto <- s$auto - 1
s$twind <- s$twind -1
View(s)
s$auto <- abs(s$auto - 1)
logFit <- glm(s$auto ~ s$twind, family="binomial")
logFit
exp(0.03181)
0.25131 / (0.25131 + 0.03181)
1/(0.8876448)
plot(s$auto, logFit$fitted)
exp(0.25131) / (exp(0.25131+0.03181))
logFit(s$auto ~ s$twind + s$magn)
logFit <- glm(s$auto ~ s$twind + s$magn, family="binomial")
logFit
exp(0.3635) / exp(0.3635 + 0.03201)
logFit2 <- glm(abs(s$auto-1) ~ s$twind)
logFit2
logFit2 <- glm(abs(s$auto-1) ~ s$twind, family="binomial")
logFit2
sp <- InsectSprays
poisFit <- glm(InsectSprays$count ~InsectSprays$spray, family="poisson")
poisFit
exp(2.67417) / (exp(2.67417 + 0.05588))
poisFitbase <- glm(sp$count ~ sp$spray + 5, family="poisson")
poisFitbase <- glm(sp$count ~ sp$spray + offset(5), family="poisson")
poisFitbase <- glm(sp$count ~ sp$spray + offset(t), family="poisson")
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x>knot) * (x-knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y~xMat -1))
plot(x, y, frame= FALSE)
plot(x, y)
lines(x, yhat, col="red")
lm(y ~xMat -1)
2.0372 - 1.0242
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~parent, galton)
plot(jitter(child,4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
varChild <- var(galton$child)
var(fit$residuals)
varRes <- var(fit$residuals)
varEst(est(fit))
varEst <- est(fit)
varEst <- est(ols.ic, ols.slope)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit<-lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(fit$residuals, attenu$mag)
cov(fit$residuals, attenu$mag)
1
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
all <- lm(fertility ~ ., swiss)
?swiss
all <- lm(Fertility ~ ., swiss)
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms(swiss)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility ~ . + ec, swiss)
1
all$coefficients-efit$coefficients
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor ~ gch_nor)
l_nor <- lm(gch_nor ~ gpa_nor)
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height +
| Constant -1, trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
install.packages('caret')
install.packages('caret')
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
adData = data.frame(diagnosis,predictors)
trainIndex=createDataPartition(diagnosis, p=0.5, list=FALSE)
training=adData[trainIndex,]
testing=adData[-trainIndex,]
data(concrete)
set.seed(1000)
inTrain=createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training=mixtures[inTrain,]
testing=mixtures[-inTrain,]
hist(training$Superplasticizer)
data(AlzheimerDisease)
set.seed(3433)
adData=data.frame(diagnosis,predictors)
inTrain=createDataPartition(adData$diagnosis, p=3/4)[[1]]
training=adData[inTrain,]
testing=adData[-inTrain,]
names(training)
t <- training[c(1,58:69),]
View(t)
c(1, 58:69)
t <- training[,c(1,58:69)]
View(t)
preProc <- preProcess(t, method="pca", pcaComp=8)
preProc <- preProcess(t, method="pca", pcaComp=2)
preProc <- preProcess(t, method="pca")
preProc <- preProcess(t[,-1], method="pca")
alzPC <- predict(preProc, t[,-1])
modelFit <- train(t$diagnosis ~., method="glm" data=alzPC)
modelFit <- train(t$diagnosis ~., method="glm", data=alzPC)
View(alzPC)
View(t)
alzPC <- predict(preProc, t[,-1])
modelFit <- train(t$diagnosis ~., method="glm", data=alzPC)
install.packages('caret', dependencies=TRUE)
install.packages("caret", dependencies = TRUE)
modelFit <- train(t$diagnosis ~., method="glm", data=alzPC)
library(caret)
modelFit <- train(t$diagnosis ~., method="glm", data=alzPC)
summary(modelFit)
preProc <- preProcess(t[,-1], method="pca", pcaComp=2)
alzPC <- predict(preProc, t[,-1])
modelFit <- train(t$diagnosis ~ ., method="glm", data=alzPC)
summary(modelFit)
modelFit <- train(t$diagnosis ~ ., method="glm", preProcess="pca", data=training)
warnings()
modelFit <- train(t$diagnosis ~ ., method="glm", preProcess="pca", data=t)
summary(modelFit)
modelFit$modelInfo
?preProcess
preProc <- preProcess(t[,-1], method="pca", thresh=0.9)
alzPC <- predict(preProc, t[,-1])
modelFit <- train(t$diagnosis ~., method="glm", data=alzPC)
summary(modelFit)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData=data.frame(diagnosis, predictors)
inTrain=createDataPartition(adData$diagnosis, p=3/4)[[1]]
training= adData[inTrain,]
testing=adData[-inTrain,]
t <- training[,c(1, 58:69)]
View(t)
View(training)
preProc <- preProcess(t[,-1], method="pca", thresh=0.8)
alzPC <- predict(preProc, t[,-1])
modelFit <- train(t$diagnosis ~., method="glm", data=alzPC)
modelFitPCA <- train(t$diagnosis ~., method="glm", data=alzPC)
modelFitNONPCA <- train(t$diagnosis ~ ., method="glm", data=t)
confusionMatrix(testing$diagnosis, predict(modelFitNONPCA, testing))
confusionMatrix(testing$diagnosis, predict(modelFitPCA, testing))
modelFitPCA <- train(t$diagnosis ~., method="glm", data=t, thresh=0.80, method="pca")
modelFitPCA <- train(t$diagnosis ~., method="glm", data=t, thresh=0.80, preProcess="pca")
preProc <- preProcess(t[,-1], method="pca", thresh=0.8)
alzPC <- predict(preProc, t[,-1])
modelFitPCA <- train(t$diagnosis ~., method="glm", data=alzPC)
confusionMatrix(testing$diagnosis, predict(modelFitPCA, testing))
confusionMatrix(testing$diagnosis, predict(alzPC, testing))
confusionMatrix(testing$diagnosis, predict(modelFitPCA, testing))
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
setwd("~/R/devdata")
library(slidify)
author("test")
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
setwd("~/R/devdata/courseproject")
install.packages('shiny')
library(shiny)
runApp()
runApp()
data(cars)
View(cars)
data(mtcars)
cars <- mtcars
View(cars)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
